#!/usr/bin/env bash
# OctoPI generation script
# Helper script that runs in a Raspbian chroot to create the OctoPI distro
# Written by Guy Sheffer <guysoft at gmail dot com> and Gina Häußge <osd@foosel.net>; modified by Filip Goc <filip at imade3d dot com>
# GPL V3
########
set -x
set -e

export LC_ALL=C

source /common.sh

### Script ####

unpack /filesystem/home/pi /home/pi pi
unpack /filesystem/home/root /root root
unpack /filesystem/boot /boot
apt-get update

# in case we are building from a regular raspbian image instead of the lite one...
remove_extra=$(remove_if_installed scratch squeak-plugins-scratch squeak-vm wolfram-engine python-minecraftpi minecraft-pi sonic-pi oracle-java8-jdk bluej libreoffice-common libreoffice-core freepats greenfoot nodered)
echo "removing:" $remove_extra
apt-get remove -y --purge  $remove_extra
apt-get autoremove -y

apt-get -y --force-yes install python2.7 python-virtualenv python-dev git screen subversion cmake checkinstall avahi-daemon libavahi-compat-libdnssd1 libffi-dev libssl-dev

echo " - Reinstall iputils-ping"
apt-get install --reinstall iputils-ping


pushd /home/pi

  #build virtualenv
  sudo -u pi virtualenv oprint
  
  sudo -u pi /home/pi/oprint/bin/pip install --upgrade pip

  # OctoPrint & pyserial
  if [ "$OCTOPI_INCLUDE_OCTOPRINT" == "yes" ]
  then
    echo "--- Installing OctoPrint"

    #pybonjour (for mdns discovery)
    sudo -u pi /home/pi/oprint/bin/pip install $OCTOPI_PYBONJOUR_ARCHIVE

    #OctoPrint
    PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/oprint/bin/pip install $OCTOPI_OCTOPRINT_ARCHIVE
  fi

  #mjpg-streamer
  if [ "$OCTOPI_INCLUDE_MJPGSTREAMER" == "yes" ]
  then
    echo "--- Installing mjpg-streamer"
    if [ $( is_in_apt libjpeg62-turbo-dev ) -eq 1 ]; then
      apt-get -y --force-yes install libjpeg62-turbo-dev
    elif [ $( is_in_apt libjpeg8-dev ) -eq 1 ]; then 
      apt-get -y --force-yes install libjpeg8-dev
    fi
    
    apt-get -y --force-yes --no-install-recommends install imagemagick libav-tools libv4l-dev
    gitclone OCTOPI_MJPGSTREAMER_REPO mjpg-streamer
    pushd mjpg-streamer
      mv mjpg-streamer-experimental/* .
      sudo -u pi make

      # create our custom web folder and add a minimal index.html to it
      sudo -u pi mkdir www-octopi
      pushd www-octopi
        cat <<EOT >> index.html
<html>
<head><title>mjpg_streamer test page</title></head>
<body>
<h1>Snapshot</h1>
<p>Refresh the page to refresh the snapshot</p>
<img src="./?action=snapshot" alt="Snapshot">
<h1>Stream</h1>
<img src="./?action=stream" alt="Stream">
</body>
</html>
EOT
      popd
    popd
  fi
  
  #CuraEngine
  # filip commented out; installing cura separately later
  if [ "$OCTOPI_INCLUDE_CURAENGINE" == "yes" ]
  then
    echo "--- Installing CuraEngine for now"
    folder=CuraEngine-$OCTOPI_CURAENGINE_VERSION
    zipfile=$folder.zip
    apt-get -y install gcc-4.9 g++-4.9
    sudo -u pi wget -O$zipfile $OCTOPI_CURAENGINE_ARCHIVE
    sudo -u pi unzip $zipfile
    pushd $folder
      sudo -u pi make CXX=g++-4.9 VERSION=$OCTOPI_CURAENGINE_VERSION
      cp build/CuraEngine /usr/local/bin/cura_engine
    popd
    sudo -u pi rm -r $folder $zipfile
  fi

  #setup haproxy for http and https, and webcam
  if [ "$OCTOPI_INCLUDE_HAPROXY" == "yes" ]
  then
    echo "--- Installing haproxy"
    apt-get -y --force-yes install ssl-cert haproxy
    rm /etc/ssl/private/ssl-cert-snakeoil.key /etc/ssl/certs/ssl-cert-snakeoil.pem
  fi

  if [ "$OCTOPI_INCLUDE_WIRINGPI" == "yes" ]
  then
    echo "--- Installing WiringPi"
    apt-get install wiringpi
  fi

  # fetch current yq build and install to /usr/local/bin
  wget -O yq $OCTOPI_YQ_DOWNLOAD && chmod +x yq && mv yq /usr/local/bin
  
popd

# Pre-install IMADE3D-curated plugins #
#-----------------------------------------

# 1. avrdude for firmware flashing
apt-get -y --force-yes install avrdude

# 2. curated plugins
# These are from local storage; so outdated most likely
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/Autoscroll-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/Autoselect-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/BetterHeaterTimeout-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/CuraEngineLegacy-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/FileManager-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/FirmwareUpdater-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/FullScreen-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/GcodeEditor-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/PortLister-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/RequestSpinner-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/SimpleEmergencyStop-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/Slicer-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/Tempsgraph-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/TerminalCommands-master.zip
# sudo -u pi /home/pi/oprint/bin/pip install /home/pi/.curated-plugins/ipOnConnect-master.zip

sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/markwal/OctoPrint-PortLister/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/jneilliii/OctoPrint-ipOnConnect/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/tjjfvi/OctoPrint-BetterHeaterTimeout/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/ieatacid/OctoPrint-TerminalCommands/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/OctoPrint/OctoPrint-FirmwareUpdater/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/BrokenFire/OctoPrint-SimpleEmergencyStop/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/OctoPrint/OctoPrint-RequestSpinner/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/kennethjiang/OctoPrint-Slicer/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/OctoPrint/OctoPrint-CuraEngineLegacy/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/Salandora/OctoPrint-FileManager/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/ieatacid/OctoPrint-GcodeEditor/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/OctoPrint/OctoPrint-Autoselect/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/MoonshineSG/OctoPrint-Autoscroll/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/1r0b1n0/OctoPrint-Tempsgraph/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/BillyBlaze/OctoPrint-FullScreen/archive/master.zip"
#sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/amsbr/OctoPrint-Stats/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/jneilliii/OctoPrint-TabOrder/archive/master.zip"
sudo -u pi /home/pi/oprint/bin/pip install "https://github.com/amsbr/OctoPrint-EEprom-Marlin/archive/master.zip"

# ----------------------------imade3d end

#Make sure user pi has access to serial ports
usermod -a -G tty pi
usermod -a -G dialout pi

# store octopi commit used to build this image
echo "$OCTOPI_COMMIT" > /etc/octopi_commit

# Keep legacy compatibility
ln -s /etc/custompios_buildbase /etc/octopi_buildbase

# allow pi user to run shutdown and service commands
echo "pi ALL=NOPASSWD: /sbin/shutdown" > /etc/sudoers.d/octoprint-shutdown
echo "pi ALL=NOPASSWD: /usr/sbin/service" > /etc/sudoers.d/octoprint-service

#make sure users don't run git with sudo, thus breaking permissions, by adding /root/bin to the
#default sudo path and placing a git wrapper script there that checks if it's run as root
sed -i "s@secure_path=\"@secure_path=\"/root/bin:@g" /etc/sudoers
chmod +x /root/bin/git

# add some "How To" info to boot output
# Note, this code is also in /filesystem/home/pi/scripts/
sed -i 's@exit 0@@' /etc/rc.local
cat <<'EOT' >> /etc/rc.local

echo
echo "------------------------------------------------------------"
echo
echo "You may now open a web browser on your local network and "
echo "navigate to any of the following addresses to access "
echo "OctoPrint:"
echo
for name in $_NAME;
do
    echo " http://$name.local"
done

for ip in $(hostname -I);
do 
    echo "    http://$ip"
done

echo
echo "https is also available, with a self-signed certificate."
echo 
echo "------------------------------------------------------------"
echo
EOT

echo 'exit 0' >> /etc/rc.local

# add a longer welcome text to ~pi/.bashrc
echo "source /home/pi/scripts/welcome" >> /home/pi/.bashrc

#unpack root in the end, so etc file are not overwritten, might need to add two roots int he future
unpack /filesystem/root /

#####################################################################
### setup services

### Disable GUI at start
systemctl_if_exists disable lightdm.service || true

update-rc.d change_password defaults
update-rc.d change_hostname defaults


### OctoPrint

if [ "$OCTOPI_INCLUDE_OCTOPRINT" == "yes" ]
then
  update-rc.d octoprint defaults 95
else
  # let's remove the configs for system services we don't need
  rm /etc/init.d/octoprint
  rm /etc/default/octoprint
fi

### haproxy

if [ "$OCTOPI_INCLUDE_HAPROXY" == "yes" ]
then
  systemctl_if_exists enable gencert.service
else
  # let's remove the configs for system services we don't need
  rm /etc/systemd/system/gencert.service

  # also we need to make OctoPrint bind to all interfaces because otherwise
  # it will be unaccessible...
  [ -f /etc/default/octoprint ] && sed -i "s@HOST=127.0.0.1@HOST=0.0.0.0@" /etc/default/octoprint 
fi

### CuraEngine
# filip commented this out to leave our yaml alone
 if [ ! "$OCTOPI_INCLUDE_CURAENGINE" == "yes" ]
 then
   # unconfigure the cura engine path in octoprint's config.yaml
   sudo -u pi sed -i -e "s@cura_engine: /usr/local/bin/cura_engine@cura_engine:@g" /home/pi/.octoprint/config.yaml
 fi

### mjpg_streamer

if [ "$OCTOPI_INCLUDE_MJPGSTREAMER" == "yes" ]
then
  # make webcamd autostart
  update-rc.d webcamd defaults
else
  rm /etc/logrotate.d/webcamd
  rm /etc/init.d/webcamd
  rm /etc/default/webcamd
  rm /root/bin/webcamd
fi

#cleanup
apt-get clean
apt-get autoremove -y

